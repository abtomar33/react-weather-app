{"version":3,"sources":["weather.js","App.js","serviceWorker.js","index.js"],"names":["weathericon","size","color","weather","props","weathertype","includes","className","date","temp","humidity","speed","mintemp","maxtemp","api","App","useState","query","setQuery","forecast","setForecast","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","city","name","country","d","day","getDay","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","list","map","item","index","main","dt_txt","description","wind","temp_min","temp_max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.127c0fc3.chunk.js","sourcesContent":["import React from'react';\r\nimport { WiDayRain,WiCloudy,WiDaySunny,WiDaySnow,WiDayStormShowers } from \"weather-icons-react\";\r\n\r\n\r\nlet  weathericon=<WiCloudy size={24} color='#000' />\r\nconst weather=(props)=>{\r\n\r\n    if(props.weathertype.includes(\"rain\")){\r\n          weathericon=<WiDayRain size={24} color='#000' />\r\n    }\r\n    if(props.weathertype.includes(\"sunny\")){\r\n        weathericon=<WiDaySunny size={24} color='#000' />\r\n     }\r\n     if(props.weathertype.includes(\"cloud\")){\r\n        weathericon=<WiCloudy size={24} color='#000' />\r\n     }\r\n     if(props.weathertype.includes(\"snow\")){\r\n        weathericon=<WiDaySnow size={24} color='#000' />\r\n     }\r\n     if(props.weathertype.includes(\"storm\")){\r\n        weathericon=<WiDayStormShowers size={24} color='#000' />\r\n     }\r\n    return (\r\n        <div className=\"weather-box\">\r\n            <div className=\"date\">Date & Time: {props.date}</div>\r\n            <div className=\"weather\">Weather: {props.weathertype} {weathericon} </div>\r\n            <div className=\"temp\">Temp: {props.temp}</div>\r\n            <div className=\"humidity\">Humidity:{props.humidity}</div>\r\n            <div className=\"windSpeed\">Speed: {props.speed}</div>\r\n            <div className=\"lowTemp\">Min-Temp: {props.mintemp}</div>\r\n            <div className=\"highTemp\">Max-Temp: {props.maxtemp}</div>\r\n      </div>\r\n    );\r\n}\r\nexport default weather;","import React ,{useState} from 'react';\nimport Weather from './weather';\n\nconst api={\n  key: \"e55f10662c84478847f0db03677b583e\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\nfunction App() {\n  const [query,setQuery]=useState('');\n  const [forecast,setForecast]=useState({});\n\n  const search=evt=>{\n    if(evt.key===\"Enter\"){\n      fetch(`${api.base}forecast?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res=>res.json())\n      .then(result=>{\n        setForecast(result);\n        console.log(forecast);\n        setQuery('');\n        \n        \n    });\n  }\n}\n\n\n  const dateBuilder=(d)=>{\n    let months=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n    let days=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\n\n    let day=days[d.getDay()];\n    \n    let date=d.getDate();\n    let month=months[d.getMonth()];\n    let year=d.getFullYear();\n    \n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n return (\n    \n    <div className=\"app\">\n      <main>\n        <div className=\"search-box\">\n          <input type=\"text\" className=\"search-bar\" placeholder=\"Search Cities\" onChange={e=>setQuery(e.target.value)}\n          value={query} onKeyPress={search}/>\n\n        </div>\n        {forecast && forecast.city ? (\n        <div className=\"weather-container\">\n          <div className=\"location\">{forecast.city.name}, {forecast.city.country}</div>\n          <div className=\"date\">Today: {dateBuilder(new Date())}</div>\n\n          {forecast.list.map((item,index) =>{\n           \n            return(\n                <Weather temp={item.main.temp}\n                  date={item.dt_txt}\n                  weathertype={item.weather[0].description}\n                  humidity={item.main.humidity}\n                  speed={item.wind.speed}\n                  mintemp={item.main.temp_min}\n                  maxtemp={item.main.temp_max}/>  \n            );\n          })}\n        \n        </div>\n        ) :null}\n       \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}